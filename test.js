import test from 'ava';

import m from '.';

const serilized = [
  '$argon2i$m=120,t=5000,p=2',
  '$argon2i$m=120,t=4294967295,p=2',
  '$argon2i$m=2040,t=5000,p=255',
  '$argon2i$m=120,t=5000,p=2,keyid=Hj5+dsK0',
  '$argon2i$m=120,t=5000,p=2,keyid=Hj5+dsK0ZQ',
  '$argon2i$m=120,t=5000,p=2,keyid=Hj5+dsK0ZQA',
  '$argon2i$m=120,t=5000,p=2,data=sRlHhRmKUGzdOmXn01XmXygd5Kc',
  '$argon2i$m=120,t=5000,p=2,keyid=Hj5+dsK0,data=sRlHhRmKUGzdOmXn01XmXygd5Kc',
  '$argon2i$m=120,t=5000,p=2$/LtFjH5rVL8',
  '$argon2i$m=120,t=5000,p=2$4fXXG0spB92WPB1NitT8/OH0VKI',
  '$argon2i$m=120,t=5000,p=2$BwUgJHHQaynE+a4nZrYRzOllGSjjxuxNXxyNRUtI6Dlw/zlbt6PzOL8Onfqs6TcG',
  '$argon2i$m=120,t=5000,p=2,keyid=Hj5+dsK0$4fXXG0spB92WPB1NitT8/OH0VKI',
  '$argon2i$m=120,t=5000,p=2,data=sRlHhRmKUGzdOmXn01XmXygd5Kc$4fXXG0spB92WPB1NitT8/OH0VKI',
  '$argon2i$m=120,t=5000,p=2,keyid=Hj5+dsK0,data=sRlHhRmKUGzdOmXn01XmXygd5Kc$4fXXG0spB92WPB1NitT8/OH0VKI',
  '$argon2i$m=120,t=5000,p=2$4fXXG0spB92WPB1NitT8/OH0VKI$iPBVuORECm5biUsjq33hn9/7BKqy9aPWKhFfK2haEsM',
  '$argon2i$m=120,t=5000,p=2,keyid=Hj5+dsK0$4fXXG0spB92WPB1NitT8/OH0VKI$iPBVuORECm5biUsjq33hn9/7BKqy9aPWKhFfK2haEsM',
  '$argon2i$m=120,t=5000,p=2,data=sRlHhRmKUGzdOmXn01XmXygd5Kc$4fXXG0spB92WPB1NitT8/OH0VKI$iPBVuORECm5biUsjq33hn9/7BKqy9aPWKhFfK2haEsM',
  '$argon2i$m=120,t=5000,p=2,keyid=Hj5+dsK0,data=sRlHhRmKUGzdOmXn01XmXygd5Kc$4fXXG0spB92WPB1NitT8/OH0VKI$iPBVuORECm5biUsjq33hn9/7BKqy9aPWKhFfK2haEsM',
  '$argon2i$m=120,t=5000,p=2,keyid=Hj5+dsK0,data=sRlHhRmKUGzdOmXn01XmXygd5Kc$iHSDPHzUhPzK7rCcJgOFfg$EkCWX6pSTqWruiR0',
  '$argon2i$m=120,t=5000,p=2,keyid=Hj5+dsK0,data=sRlHhRmKUGzdOmXn01XmXygd5Kc$iHSDPHzUhPzK7rCcJgOFfg$J4moa2MM0/6uf3HbY2Tf5Fux8JIBTwIhmhxGRbsY14qhTltQt+Vw3b7tcJNEbk8ium8AQfZeD4tabCnNqfkD1g',
  '$argon2i$v=19$m=120,t=5000,p=2,keyid=Hj5+dsK0,data=sRlHhRmKUGzdOmXn01XmXygd5Kc$iHSDPHzUhPzK7rCcJgOFfg$J4moa2MM0/6uf3HbY2Tf5Fux8JIBTwIhmhxGRbsY14qhTltQt+Vw3b7tcJNEbk8ium8AQfZeD4tabCnNqfkD1g',
];

const deserialized = [
  {id: 'argon2i', params: {m: '120', t: '5000', p: '2'}},
  {id: 'argon2i', params: {m: '120', t: '4294967295', p: '2'}},
  {id: 'argon2i', params: {m: '2040', t: '5000', p: '255'}},
  {id: 'argon2i', params: {m: '120', t: '5000', p: '2', keyid: 'Hj5+dsK0'}},
  {id: 'argon2i', params: {m: '120', t: '5000', p: '2', keyid: 'Hj5+dsK0ZQ'}},
  {id: 'argon2i', params: {m: '120', t: '5000', p: '2', keyid: 'Hj5+dsK0ZQA'}},
  {
    id: 'argon2i',
    params: {m: '120', t: '5000', p: '2', data: 'sRlHhRmKUGzdOmXn01XmXygd5Kc'},
  },
  {
    id: 'argon2i',
    params: {
      m: '120',
      t: '5000',
      p: '2',
      keyid: 'Hj5+dsK0',
      data: 'sRlHhRmKUGzdOmXn01XmXygd5Kc',
    },
  },
  {
    id: 'argon2i',
    params: {m: '120', t: '5000', p: '2'},
    salt: Buffer.from([252, 187, 69, 140, 126, 107, 84, 191]),
  },
  {
    id: 'argon2i',
    params: {m: '120', t: '5000', p: '2'},
    salt: Buffer.from([
      225,
      245,
      215,
      27,
      75,
      41,
      7,
      221,
      150,
      60,
      29,
      77,
      138,
      212,
      252,
      252,
      225,
      244,
      84,
      162,
    ]),
  },
  {
    id: 'argon2i',
    params: {m: '120', t: '5000', p: '2'},
    salt: Buffer.from([
      7,
      5,
      32,
      36,
      113,
      208,
      107,
      41,
      196,
      249,
      174,
      39,
      102,
      182,
      17,
      204,
      233,
      101,
      25,
      40,
      227,
      198,
      236,
      77,
      95,
      28,
      141,
      69,
      75,
      72,
      232,
      57,
      112,
      255,
      57,
      91,
      183,
      163,
      243,
      56,
      191,
      14,
      157,
      250,
      172,
      233,
      55,
      6,
    ]),
  },
  {
    id: 'argon2i',
    params: {m: '120', t: '5000', p: '2', keyid: 'Hj5+dsK0'},
    salt: Buffer.from([
      225,
      245,
      215,
      27,
      75,
      41,
      7,
      221,
      150,
      60,
      29,
      77,
      138,
      212,
      252,
      252,
      225,
      244,
      84,
      162,
    ]),
  },
  {
    id: 'argon2i',
    params: {m: '120', t: '5000', p: '2', data: 'sRlHhRmKUGzdOmXn01XmXygd5Kc'},
    salt: Buffer.from([
      225,
      245,
      215,
      27,
      75,
      41,
      7,
      221,
      150,
      60,
      29,
      77,
      138,
      212,
      252,
      252,
      225,
      244,
      84,
      162,
    ]),
  },
  {
    id: 'argon2i',
    params: {
      m: '120',
      t: '5000',
      p: '2',
      keyid: 'Hj5+dsK0',
      data: 'sRlHhRmKUGzdOmXn01XmXygd5Kc',
    },
    salt: Buffer.from([
      225,
      245,
      215,
      27,
      75,
      41,
      7,
      221,
      150,
      60,
      29,
      77,
      138,
      212,
      252,
      252,
      225,
      244,
      84,
      162,
    ]),
  },
  {
    id: 'argon2i',
    params: {m: '120', t: '5000', p: '2'},
    salt: Buffer.from([
      225,
      245,
      215,
      27,
      75,
      41,
      7,
      221,
      150,
      60,
      29,
      77,
      138,
      212,
      252,
      252,
      225,
      244,
      84,
      162,
    ]),
    hash: Buffer.from([
      136,
      240,
      85,
      184,
      228,
      68,
      10,
      110,
      91,
      137,
      75,
      35,
      171,
      125,
      225,
      159,
      223,
      251,
      4,
      170,
      178,
      245,
      163,
      214,
      42,
      17,
      95,
      43,
      104,
      90,
      18,
      195,
    ]),
  },
  {
    id: 'argon2i',
    params: {m: '120', t: '5000', p: '2', keyid: 'Hj5+dsK0'},
    salt: Buffer.from([
      225,
      245,
      215,
      27,
      75,
      41,
      7,
      221,
      150,
      60,
      29,
      77,
      138,
      212,
      252,
      252,
      225,
      244,
      84,
      162,
    ]),
    hash: Buffer.from([
      136,
      240,
      85,
      184,
      228,
      68,
      10,
      110,
      91,
      137,
      75,
      35,
      171,
      125,
      225,
      159,
      223,
      251,
      4,
      170,
      178,
      245,
      163,
      214,
      42,
      17,
      95,
      43,
      104,
      90,
      18,
      195,
    ]),
  },
  {
    id: 'argon2i',
    params: {m: '120', t: '5000', p: '2', data: 'sRlHhRmKUGzdOmXn01XmXygd5Kc'},
    salt: Buffer.from([
      225,
      245,
      215,
      27,
      75,
      41,
      7,
      221,
      150,
      60,
      29,
      77,
      138,
      212,
      252,
      252,
      225,
      244,
      84,
      162,
    ]),
    hash: Buffer.from([
      136,
      240,
      85,
      184,
      228,
      68,
      10,
      110,
      91,
      137,
      75,
      35,
      171,
      125,
      225,
      159,
      223,
      251,
      4,
      170,
      178,
      245,
      163,
      214,
      42,
      17,
      95,
      43,
      104,
      90,
      18,
      195,
    ]),
  },
  {
    id: 'argon2i',
    params: {
      m: '120',
      t: '5000',
      p: '2',
      keyid: 'Hj5+dsK0',
      data: 'sRlHhRmKUGzdOmXn01XmXygd5Kc',
    },
    salt: Buffer.from([
      225,
      245,
      215,
      27,
      75,
      41,
      7,
      221,
      150,
      60,
      29,
      77,
      138,
      212,
      252,
      252,
      225,
      244,
      84,
      162,
    ]),
    hash: Buffer.from([
      136,
      240,
      85,
      184,
      228,
      68,
      10,
      110,
      91,
      137,
      75,
      35,
      171,
      125,
      225,
      159,
      223,
      251,
      4,
      170,
      178,
      245,
      163,
      214,
      42,
      17,
      95,
      43,
      104,
      90,
      18,
      195,
    ]),
  },
  {
    id: 'argon2i',
    params: {
      m: '120',
      t: '5000',
      p: '2',
      keyid: 'Hj5+dsK0',
      data: 'sRlHhRmKUGzdOmXn01XmXygd5Kc',
    },
    salt: Buffer.from([
      136,
      116,
      131,
      60,
      124,
      212,
      132,
      252,
      202,
      238,
      176,
      156,
      38,
      3,
      133,
      126,
    ]),
    hash: Buffer.from([18, 64, 150, 95, 170, 82, 78, 165, 171, 186, 36, 116]),
  },
  {
    id: 'argon2i',
    params: {
      m: '120',
      t: '5000',
      p: '2',
      keyid: 'Hj5+dsK0',
      data: 'sRlHhRmKUGzdOmXn01XmXygd5Kc',
    },
    salt: Buffer.from([
      136,
      116,
      131,
      60,
      124,
      212,
      132,
      252,
      202,
      238,
      176,
      156,
      38,
      3,
      133,
      126,
    ]),
    hash: Buffer.from([
      39,
      137,
      168,
      107,
      99,
      12,
      211,
      254,
      174,
      127,
      113,
      219,
      99,
      100,
      223,
      228,
      91,
      177,
      240,
      146,
      1,
      79,
      2,
      33,
      154,
      28,
      70,
      69,
      187,
      24,
      215,
      138,
      161,
      78,
      91,
      80,
      183,
      229,
      112,
      221,
      190,
      237,
      112,
      147,
      68,
      110,
      79,
      34,
      186,
      111,
      0,
      65,
      246,
      94,
      15,
      139,
      90,
      108,
      41,
      205,
      169,
      249,
      3,
      214,
    ]),
  },
  {
    id: 'argon2i',
    raw: 'v=19',
    params: {
      m: '120',
      t: '5000',
      p: '2',
      keyid: 'Hj5+dsK0',
      data: 'sRlHhRmKUGzdOmXn01XmXygd5Kc',
    },
    salt: Buffer.from([
      136,
      116,
      131,
      60,
      124,
      212,
      132,
      252,
      202,
      238,
      176,
      156,
      38,
      3,
      133,
      126,
    ]),
    hash: Buffer.from([
      39,
      137,
      168,
      107,
      99,
      12,
      211,
      254,
      174,
      127,
      113,
      219,
      99,
      100,
      223,
      228,
      91,
      177,
      240,
      146,
      1,
      79,
      2,
      33,
      154,
      28,
      70,
      69,
      187,
      24,
      215,
      138,
      161,
      78,
      91,
      80,
      183,
      229,
      112,
      221,
      190,
      237,
      112,
      147,
      68,
      110,
      79,
      34,
      186,
      111,
      0,
      65,
      246,
      94,
      15,
      139,
      90,
      108,
      41,
      205,
      169,
      249,
      3,
      214,
    ]),
  },
];

test('should deserialize correct phc strings', t => {
  serilized.forEach((g, i) => {
    t.deepEqual(m.deserialize(serilized[i]), deserialized[i]);
  });
});

test('should serialize correct phc objects', t => {
  serilized.forEach((g, i) => {
    t.deepEqual(m.serialize(deserialized[i]), serilized[i]);
  });
});

test('should thow errors if trying to deserialize an invalid phc string', async t => {
  let err = await t.throws(() => m.deserialize(null));
  t.is(err.message, 'pchstr must be a string');

  err = await t.throws(() => m.deserialize('invalid'));
  t.is(err.message, 'pchstr must contain at least one $ char');

  err = await t.throws(() => m.deserialize('$i_n_v_a_l_i_d'));
  t.not(err.message.indexOf('id must satisfy'), -1);

  err = await t.throws(() => m.deserialize('$pbkdf2$rounds_=1000'));
  t.not(err.message.indexOf('params names must satisfy'), -1);

  err = await t.throws(() => m.deserialize('$pbkdf2$rounds=1000@'));
  t.not(err.message.indexOf('params values must satisfy'), -1);

  err = await t.throws(() => m.deserialize('$pbkdf2$rounds:1000'));
  t.not(err.message.indexOf('params must be in the format name=value'), -1);
});

test('should thow errors if trying to serialize with invalid arguments', async t => {
  let err = await t.throws(() => m.serialize(null));
  t.is(err.message, 'opts must be an object');

  err = await t.throws(() => m.serialize({}));
  t.is(err.message, 'id must be a string');

  err = await t.throws(() => m.serialize({id: 'i_n_v_a_l_i_d'}));
  t.not(err.message.indexOf('id must satisfy'), -1);

  err = await t.throws(() => m.serialize({id: 'pbkdf2', params: null}));
  t.not(err.message.indexOf('params must be an object'), -1);

  err = await t.throws(() =>
    m.serialize({id: 'pbkdf2', params: {rounds_: '1000'}})
  );
  t.not(err.message.indexOf('params names must satisfy'), -1);

  err = await t.throws(() =>
    m.serialize({id: 'pbkdf2', params: {rounds: 1000}})
  );
  t.not(err.message.indexOf('params values must be strings'), -1);

  err = await t.throws(() =>
    m.serialize({id: 'pbkdf2', params: {rounds: '1000@'}})
  );
  t.not(err.message.indexOf('params values must satisfy'), -1);

  err = await t.throws(() =>
    m.serialize({id: 'pbkdf2', params: {rounds: '1000'}, salt: 'string'})
  );
  t.not(err.message.indexOf('salt must be a Buffer'), -1);

  err = await t.throws(() =>
    m.serialize({
      id: 'pbkdf2',
      params: {rounds: '1000'},
      salt: Buffer.from('string'),
      hash: 'string',
    })
  );
  t.not(err.message.indexOf('hash must be a Buffer'), -1);
});
